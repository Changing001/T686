plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    //    id("com.google.gms.google-services")
//    id("com.google.firebase.crashlytics")
}

apply plugin: 'stringfog'
import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
import com.github.megatronking.stringfog.plugin.StringFogMode

stringfog {
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    packageName 'com.github.megatronking.stringfog.app'
    enable true
    fogPackages = ['com.announcement.comprehension']
    kg new RandomKeyGenerator()
    mode StringFogMode.bytes
}

android {
    namespace 'com.announcement.comprehension'
    compileSdk 35

    defaultConfig {
        applicationId "com.announcement.comprehension"
        minSdk 26
        targetSdk 36
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
}


dependencies {
    implementation 'com.github.megatronking.stringfog:xor:5.0.0'
    api 'com.github.bumptech.glide:glide:4.16.0'
    implementation libs.androidx.activity
    annotationProcessor 'com.github.bumptech.glide:compiler:4.16.0'
    implementation "androidx.datastore:datastore-preferences:1.1.7"

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core


    //pangle
    implementation('com.pangle.global:pag-sdk-m:7.5.6.1')
//    implementation 'com.pangle.global:ads-sdk-m:6.5.7.7'
    implementation 'com.pangle.global:applovin-adapter:13.3.1.1'
    implementation 'com.pangle.global:mintegral-adapter:16.9.71.4'
    implementation 'com.pangle.global:bigo-adapter:5.5.1.1'
    implementation('com.pangle.global:vungle-adapter:7.5.1.1')

    implementation("com.mbridge.msdk.oversea:mbridge_android_sdk:16.9.71")
    implementation("com.vungle:vungle-ads:7.5.1")
    implementation("com.bigossp:bigo-ads:5.5.1")


    //TopON
    //TU (Necessary)
    api "com.thinkup.sdk:core-tpn:6.5.16"
    api "com.thinkup.sdk:nativead-tpn:6.5.16"
    api "com.thinkup.sdk:banner-tpn:6.5.16"
    api "com.thinkup.sdk:interstitial-tpn:6.5.16"
    api "com.thinkup.sdk:rewardedvideo-tpn:6.5.16"
    api "com.thinkup.sdk:splash-tpn:6.5.16"

    //Androidx (Necessary)
    api "androidx.appcompat:appcompat:1.6.1"
    api "androidx.browser:browser:1.4.0"

    //Vungle
    api "com.thinkup.sdk:adapter-tpn-vungle:6.5.16"
    api "com.vungle:vungle-ads:7.5.0"
    api "com.google.android.gms:play-services-basement:18.1.0"
    api "com.google.android.gms:play-services-ads-identifier:18.0.1"

    //Bigo
    api "com.thinkup.sdk:adapter-tpn-bigo:6.5.16.1"
    api "com.bigossp:bigo-ads:5.5.1"

    //AppLovin
    api "com.thinkup.sdk:adapter-tpn-applovin:6.5.16"
    api "com.applovin:applovin-sdk:13.3.1"

    //Mintegral
    api "com.thinkup.sdk:adapter-tpn-mintegral:6.5.16.1"
    api "com.mbridge.msdk.oversea:mbridge_android_sdk:16.9.91"
    api "androidx.recyclerview:recyclerview:1.1.0"

//Tramini
    api "com.thinkup.sdk:tramini-plugin-tpn:6.5.16"


    //
    implementation("com.google.android.gms:play-services-ads-identifier:18.0.1")
    implementation("com.tencent:mmkv:1.3.14")
    implementation("com.android.installreferrer:installreferrer:2.2")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")

    implementation("com.appsflyer:af-android-sdk:6.17.0")
    implementation("com.facebook.android:facebook-android-sdk:18.0.3")
    implementation("androidx.work:work-runtime-ktx:2.10.3")

    implementation(platform("com.google.firebase:firebase-bom:33.12.0"))
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-crashlytics-ktx")
//    implementation("com.google.firebase:firebase-config")
    implementation("com.google.firebase:firebase-messaging")

    //Alex Adapter
    api 'io.github.alex-only:max_adapter_tu:1.2.6'


    implementation("com.applovin:applovin-sdk:+")
    implementation("com.applovin.mediation:bigoads-adapter:5.5.1.0")
    implementation("com.applovin.mediation:vungle-adapter:7.5.0.0")
    implementation("com.applovin.mediation:mintegral-adapter:+")
}


//def key = "vbiKMu90!pkk*&BK"
//
//
//import javax.crypto.Cipher
//import javax.crypto.spec.SecretKeySpec
//
//def aesEncrypt(byte[] data, String key) {
//    def cipher = Cipher.getInstance("AES/ECB/PKCS5Padding")
//    def secretKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES")
//    cipher.init(Cipher.ENCRYPT_MODE, secretKey)
//    return cipher.doFinal(data)
//}
//
//
//task encryptSo {
//    group = "encryption"
//    description = "Encrypts the SO file using AES and saves to assets"
//
//    doLast {
//        def name = "libkik.so"
//
////        def abi = "arm64-v8a"//64
////        def outName = "H64.webp"//64
//
//        def abi = "armeabi-v7a" //32
//        def outName = "H32.webp"//32
//
//        def inputFile = file("libs/${abi}/${name}")
//        def outputFile = file("src/main/assets/${outName}")
//
//        if (!inputFile.exists()) {
//            throw new GradleException("‚ùå SO no Exist: ${inputFile.absolutePath}")
//        }
//
//        def inputBytes = inputFile.bytes
//        def encryptedBytes = aesEncrypt(inputBytes, key)
//        outputFile.parentFile.mkdirs()
//        outputFile.bytes = encryptedBytes
//    }
//}