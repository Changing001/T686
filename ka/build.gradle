plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
}

android {
    namespace 'm.ki'
    compileSdk 35

    defaultConfig {
        minSdk 26

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material


    //TU (Necessary)
    api "com.thinkup.sdk:core-tpn:6.5.16"
    api "com.thinkup.sdk:nativead-tpn:6.5.16"
    api "com.thinkup.sdk:banner-tpn:6.5.16"
    api "com.thinkup.sdk:interstitial-tpn:6.5.16"
    api "com.thinkup.sdk:rewardedvideo-tpn:6.5.16"
    api "com.thinkup.sdk:splash-tpn:6.5.16"

    //Androidx (Necessary)
    api "androidx.appcompat:appcompat:1.6.1"
    api "androidx.browser:browser:1.4.0"

    //Vungle
    api "com.thinkup.sdk:adapter-tpn-vungle:6.5.16"
    api "com.vungle:vungle-ads:7.5.0"
    api "com.google.android.gms:play-services-basement:18.1.0"
    api "com.google.android.gms:play-services-ads-identifier:18.0.1"

    //Bigo
    api "com.thinkup.sdk:adapter-tpn-bigo:6.5.16.1"
    api "com.bigossp:bigo-ads:5.5.1"

    //AppLovin
    api "com.thinkup.sdk:adapter-tpn-applovin:6.5.16"
    api "com.applovin:applovin-sdk:13.3.1"

    //Mintegral
    api "com.thinkup.sdk:adapter-tpn-mintegral:6.5.16.1"
    api "com.mbridge.msdk.oversea:mbridge_android_sdk:16.9.91"
    api "androidx.recyclerview:recyclerview:1.1.0"

//Tramini
    api "com.thinkup.sdk:tramini-plugin-tpn:6.5.16"


    implementation("com.tencent:mmkv:1.3.14")
    implementation ('com.pangle.global:pag-sdk-m:7.5.6.1')
    implementation("com.appsflyer:af-android-sdk:6.17.0")
}





task aMakeJar(type: Jar) {
    def name = project.name
    delete 'makejar/' + name + '.jar'
    delete 'makejar/' + name + '_dex.jar'
    name + '.jar'
    from(project.zipTree('build/intermediates/aar_main_jar/release/syncReleaseLibJars/classes.jar'))
    include('com/**')
    include('**/')
    exclude('*/BuildConfig.class')
    exclude('*/BuildConfig\$*.class')
    destinationDirectory = file('makejar')
}
aMakeJar.dependsOn(build)

task dexJar(type: Exec) {
    def name = project.name
    //Tb
    def sdkDir = "/Users/tb-wj/Library/Android/sdk"
    def buildToolsVersion = "33.0.1"
    def d8Path = "${sdkDir}/build-tools/${buildToolsVersion}/d8"

    //Home
//    def sdkDir = "/Users/wangjiang/Library/Android/sdk"
//    def buildToolsVersion = "30.0.3"
//    def d8Path = "${sdkDir}/build-tools/${buildToolsVersion}/d8"

    def inputJar = "${project.projectDir}/makejar/${name}.jar"
    def outputDir = "${project.projectDir}/makejar"
    def outputDex = new File(outputDir, "classes.dex")
    def renamedDex = new File(outputDir, "${name}.dex")

    doFirst {
        file(outputDir).mkdirs()
        if (renamedDex.exists()) {
            renamedDex.delete()
        }
    }

    commandLine d8Path, "--output", outputDir, inputJar

    doLast {
        if (outputDex.exists()) {
            outputDex.renameTo(renamedDex)
            println "Renamed classes.dex to ${name}.dex"
        } else {
            throw new GradleException("D8 did not generate classes.dex")
        }
    }
}

dexJar.dependsOn aMakeJar

// 16-byte key
def importantKey = "vbiKMu90!pkk*&BK"

task encryptDexToTxt {
    def dexFile = file("${projectDir}/makejar/${project.name + ".dex"}")
    def outputFile = file("${projectDir}/src/main/assets/${"${project.name}.txt"}")

    doLast {
        if (!dexFile.exists()) {
            throw new GradleException("❌ File not found: ${dexFile.absolutePath}")
        }
        byte[] dexBytes = dexFile.bytes
        byte[] encryptedBytes = aesEncrypt(dexBytes, importantKey)

        def base64Encoded = Base64.encoder.encodeToString(encryptedBytes)
        outputFile.parentFile.mkdirs()
        outputFile.text = base64Encoded
        println "✅ Encrypted Base64 saved to: ${outputFile.absolutePath}"
    }
}

import javax.crypto.Cipher
import javax.crypto.spec.SecretKeySpec

def aesEncrypt(byte[] data, String key) {
    def cipher = Cipher.getInstance("AES/ECB/PKCS5Padding")
    def secretKey = new SecretKeySpec(key.getBytes("UTF-8"), "AES")
    cipher.init(Cipher.ENCRYPT_MODE, secretKey)
    return cipher.doFinal(data)
}